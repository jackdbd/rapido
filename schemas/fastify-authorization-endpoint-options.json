{
  "$id": "fastify-authorization-endpoint-options",
  "description": "Options for the Fastify authorization-endpoint plugin",
  "title": "Authorization Endpoint Options",
  "type": "object",
  "properties": {
    "ajv": {
      "description": "Instance of Ajv"
    },
    "authorizationCodeExpiration": {
      "default": "10 minutes",
      "minLength": 1,
      "type": "string"
    },
    "components": {
      "description": "Filepaths to WebC components",
      "type": "object",
      "properties": {
        "consent-form": {
          "minLength": 1,
          "type": "string"
        },
        "scope-list": {
          "minLength": 1,
          "type": "string"
        },
        "the-footer": {
          "minLength": 1,
          "type": "string"
        },
        "the-header": {
          "minLength": 1,
          "type": "string"
        }
      }
    },
    "redirectPathOnSubmit": {
      "minLength": 1,
      "default": "/consent",
      "type": "string"
    },
    "includeErrorDescription": {
      "description": "Whether to include an `error_description` property in all error responses. This is meant to assist the client developer in understanding the error. This is NOT meant to be shown to the end user.",
      "default": false,
      "type": "boolean"
    },
    "issuer": {
      "description": "The authorization server's issuer identifier. It's a URL that uses the \"https\" scheme and has no query or fragment components. It MUST also be a prefix of the indieauth-metadata URL.",
      "format": "uri",
      "title": "Issuer",
      "type": "string"
    },
    "logPrefix": {
      "default": "[authorization-endpoint] ",
      "type": "string"
    },
    "onAuthorizationCodeVerified": {
      "title": "onAuthorizationCodeVerified",
      "description": "Handler that runs after an authorization code has been verified. You should use this handler to inform your storage backend that the authorization code has been used.",
      "type": "Function",
      "parameters": [
        {
          "minLength": 32,
          "maxLength": 1000,
          "title": "Authorization code",
          "description": "Authorization code issued by the authorization endpoint of the IndieAuth server. It should be a single-use, unguessable, random string.",
          "type": "string"
        }
      ],
      "returns": {
        "type": "Promise",
        "item": {
          "type": "void"
        }
      }
    },
    "onUserApprovedRequest": {
      "title": "onUserApprovedRequest",
      "description": "Handler executed after the user approves the authorization request on the consent screen. You should use it to persist the authorization code generated by the authorization code generated by the authorization endpoint into your storage backend.",
      "type": "Function",
      "parameters": [
        {
          "$id": "authorization-code-props",
          "additionalProperties": false,
          "title": "Authorization Code Props",
          "description": "Properties of an Authorization Code (a storage implementation may have addition properties)",
          "type": "object",
          "properties": {
            "client_id": {
              "description": "The ID of the application that asks for authorization. An IndieAuth client ID is a URL.",
              "format": "uri",
              "type": "string"
            },
            "code": {
              "minLength": 32,
              "maxLength": 1000,
              "title": "Authorization code",
              "description": "Authorization code issued by the authorization endpoint of the IndieAuth server. It should be a single-use, unguessable, random string.",
              "type": "string"
            },
            "code_challenge": {
              "$ref": "pkce-code-challenge"
            },
            "code_challenge_method": {
              "$ref": "pkce-code-challenge-method"
            },
            "exp": {
              "description": "UNIX timestamp when the JWT expires",
              "minimum": 0,
              "title": "\"exp\" (Expiration Time) Claim",
              "type": "number"
            },
            "iss": {
              "description": "The authorization server's issuer identifier. It's a URL that uses the \"https\" scheme and has no query or fragment components. It MUST also be a prefix of the indieauth-metadata URL.",
              "format": "uri",
              "title": "Issuer",
              "type": "string"
            },
            "me": {
              "description": "Profile URL (after URL Canonicalization)",
              "format": "uri",
              "title": "me (canonicalized)",
              "type": "string"
            },
            "redirect_uri": {
              "description": "Holds a URL. A successful response from this endpoint results in a redirect to this URL.",
              "format": "uri",
              "type": "string"
            },
            "scope": {
              "description": "Scope values. See [RFC8693 scope claim](https://www.rfc-editor.org/rfc/rfc8693.html#name-scope-scopes-claim)",
              "minLength": 1,
              "title": "OAuth 2.0 scope (scopes) claim",
              "type": "string"
            },
            "used": {
              "type": "boolean"
            }
          },
          "required": [
            "client_id",
            "code",
            "code_challenge",
            "code_challenge_method",
            "exp",
            "me",
            "redirect_uri",
            "scope"
          ]
        }
      ],
      "returns": {
        "type": "Promise",
        "item": {
          "type": "void"
        }
      }
    },
    "reportAllAjvErrors": {
      "description": "Whether to report all AJV validation errors.",
      "title": "report all AJV errors",
      "default": false,
      "type": "boolean"
    },
    "retrieveAuthorizationCode": {
      "$id": "retrieve-authorization-code",
      "title": "retrieveAuthorizationCode",
      "description": "Retrieves an authorization code from a storage backend.",
      "type": "Function",
      "parameters": [
        {
          "minLength": 32,
          "maxLength": 1000,
          "title": "Authorization code",
          "description": "Authorization code issued by the authorization endpoint of the IndieAuth server. It should be a single-use, unguessable, random string.",
          "type": "string"
        }
      ],
      "returns": {
        "type": "Promise",
        "item": {
          "anyOf": [
            {
              "$id": "authorization-code-immutable-record",
              "additionalProperties": false,
              "description": "Represents a record of an authorization code. The values of\n      this record should never change. Any updates to the underlying entity should \n      create a new record.",
              "title": "Authorization Code Immutable Record",
              "type": "object",
              "properties": {
                "created_at": {
                  "minimum": 1,
                  "title": "Timestamp (ms)",
                  "description": "Timestamp in milliseconds since UNIX epoch",
                  "type": "number"
                },
                "id": {
                  "title": "Record ID",
                  "description": "Unique identifier for a record stored in some persistent storage (e.g. a database).",
                  "anyOf": [
                    {
                      "minimum": 1,
                      "type": "number"
                    },
                    {
                      "minLength": 1,
                      "type": "string"
                    }
                  ]
                },
                "client_id": {
                  "description": "The ID of the application that asks for authorization. An IndieAuth client ID is a URL.",
                  "format": "uri",
                  "type": "string"
                },
                "code": {
                  "minLength": 32,
                  "maxLength": 1000,
                  "title": "Authorization code",
                  "description": "Authorization code issued by the authorization endpoint of the IndieAuth server. It should be a single-use, unguessable, random string.",
                  "type": "string"
                },
                "code_challenge": {
                  "$ref": "pkce-code-challenge"
                },
                "code_challenge_method": {
                  "$ref": "pkce-code-challenge-method"
                },
                "exp": {
                  "description": "UNIX timestamp when the JWT expires",
                  "minimum": 0,
                  "title": "\"exp\" (Expiration Time) Claim",
                  "type": "number"
                },
                "iss": {
                  "description": "The authorization server's issuer identifier. It's a URL that uses the \"https\" scheme and has no query or fragment components. It MUST also be a prefix of the indieauth-metadata URL.",
                  "format": "uri",
                  "title": "Issuer",
                  "type": "string"
                },
                "me": {
                  "description": "Profile URL (after URL Canonicalization)",
                  "format": "uri",
                  "title": "me (canonicalized)",
                  "type": "string"
                },
                "redirect_uri": {
                  "description": "Holds a URL. A successful response from this endpoint results in a redirect to this URL.",
                  "format": "uri",
                  "type": "string"
                },
                "scope": {
                  "description": "Scope values. See [RFC8693 scope claim](https://www.rfc-editor.org/rfc/rfc8693.html#name-scope-scopes-claim)",
                  "minLength": 1,
                  "title": "OAuth 2.0 scope (scopes) claim",
                  "type": "string"
                },
                "used": {
                  "type": "boolean"
                }
              },
              "required": [
                "created_at",
                "id",
                "client_id",
                "code",
                "code_challenge",
                "code_challenge_method",
                "exp",
                "me",
                "redirect_uri",
                "scope"
              ]
            },
            {
              "$id": "authorization-code-mutable-record",
              "additionalProperties": false,
              "description": "Represents a record of an authorization code with a predefined\n      set of properties (columns). While the structure of the record remains \n      consistent, the values of these properties may change over time.",
              "title": "Authorization Code Mutable Record",
              "type": "object",
              "properties": {
                "created_at": {
                  "anyOf": [
                    {
                      "minimum": 1,
                      "title": "Timestamp (ms)",
                      "description": "Timestamp in milliseconds since UNIX epoch",
                      "type": "number"
                    },
                    {
                      "type": "null"
                    }
                  ]
                },
                "deleted_at": {
                  "anyOf": [
                    {
                      "minimum": 1,
                      "title": "Timestamp (ms)",
                      "description": "Timestamp in milliseconds since UNIX epoch",
                      "type": "number"
                    },
                    {
                      "type": "null"
                    }
                  ]
                },
                "id": {
                  "title": "Record ID",
                  "description": "Unique identifier for a record stored in some persistent storage (e.g. a database).",
                  "anyOf": [
                    {
                      "minimum": 1,
                      "type": "number"
                    },
                    {
                      "minLength": 1,
                      "type": "string"
                    }
                  ]
                },
                "undeleted_at": {
                  "anyOf": [
                    {
                      "minimum": 1,
                      "title": "Timestamp (ms)",
                      "description": "Timestamp in milliseconds since UNIX epoch",
                      "type": "number"
                    },
                    {
                      "type": "null"
                    }
                  ]
                },
                "updated_at": {
                  "anyOf": [
                    {
                      "minimum": 1,
                      "title": "Timestamp (ms)",
                      "description": "Timestamp in milliseconds since UNIX epoch",
                      "type": "number"
                    },
                    {
                      "type": "null"
                    }
                  ]
                },
                "client_id": {
                  "description": "The ID of the application that asks for authorization. An IndieAuth client ID is a URL.",
                  "format": "uri",
                  "type": "string"
                },
                "code": {
                  "minLength": 32,
                  "maxLength": 1000,
                  "title": "Authorization code",
                  "description": "Authorization code issued by the authorization endpoint of the IndieAuth server. It should be a single-use, unguessable, random string.",
                  "type": "string"
                },
                "code_challenge": {
                  "$ref": "pkce-code-challenge"
                },
                "code_challenge_method": {
                  "$ref": "pkce-code-challenge-method"
                },
                "exp": {
                  "description": "UNIX timestamp when the JWT expires",
                  "minimum": 0,
                  "title": "\"exp\" (Expiration Time) Claim",
                  "type": "number"
                },
                "iss": {
                  "description": "The authorization server's issuer identifier. It's a URL that uses the \"https\" scheme and has no query or fragment components. It MUST also be a prefix of the indieauth-metadata URL.",
                  "format": "uri",
                  "title": "Issuer",
                  "type": "string"
                },
                "me": {
                  "description": "Profile URL (after URL Canonicalization)",
                  "format": "uri",
                  "title": "me (canonicalized)",
                  "type": "string"
                },
                "redirect_uri": {
                  "description": "Holds a URL. A successful response from this endpoint results in a redirect to this URL.",
                  "format": "uri",
                  "type": "string"
                },
                "scope": {
                  "description": "Scope values. See [RFC8693 scope claim](https://www.rfc-editor.org/rfc/rfc8693.html#name-scope-scopes-claim)",
                  "minLength": 1,
                  "title": "OAuth 2.0 scope (scopes) claim",
                  "type": "string"
                },
                "used": {
                  "type": "boolean"
                }
              },
              "required": [
                "created_at",
                "id",
                "client_id",
                "code",
                "code_challenge",
                "code_challenge_method",
                "exp",
                "me",
                "redirect_uri",
                "scope"
              ]
            }
          ]
        }
      }
    },
    "templates": {
      "description": "Filepaths to WebC templates",
      "minItems": 1,
      "type": "array",
      "items": {
        "minLength": 1,
        "type": "string"
      }
    }
  },
  "required": [
    "onAuthorizationCodeVerified",
    "onUserApprovedRequest",
    "retrieveAuthorizationCode"
  ]
}