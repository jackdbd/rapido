import { Static, Type } from '@sinclair/typebox'
import {
  access_token_immutable_record,
  access_token_mutable_record
} from './access-token.js'
import {
  authorization_code,
  authorization_code_immutable_record,
  authorization_code_mutable_record,
  authorization_code_props
} from './authorization-code.js'
import { jti } from './jwt.js'
import { me_after_url_canonicalization } from './me.js'
import {
  refresh_token,
  refresh_token_immutable_record,
  refresh_token_mutable_record
} from './refresh-token.js'
import { revocation_reason } from './revocation.js'
import { tokens_plus_info } from './tokens-plus-info.js'
import {
  user_profile_immutable_record,
  user_profile_mutable_record
} from './user-profile.js'

/**
 * Predicate function that returns true if a jti (JSON Web Token ID) is revoked.
 * This function will most likely need to access a storage backend in order to
 * come up with an answer.
 */
export const isAccessTokenRevoked = Type.Function(
  [jti],
  Type.Promise(Type.Boolean()),
  {
    title: 'isAccessTokenRevoked',
    description: `Predicate function that returns true if a jti (JSON Web Token ID) is revoked.`
  }
)

/**
 * Predicate function that returns true if a jti (JSON Web Token ID) is revoked.
 * This function will most likely need to access a storage backend in order to
 * come up with an answer.
 */
export type IsAccessTokenRevoked = Static<typeof isAccessTokenRevoked>

/**
 * Handler that runs after an authorization code has been verified.
 * You should use this handler to inform your storage backend that the
 * authorization code has been used.
 */
export const onAuthorizationCodeVerified = Type.Function(
  [authorization_code],
  Type.Promise(Type.Void()),
  {
    title: 'onAuthorizationCodeVerified',
    description: `Handler that runs after an authorization code has been verified. You should use this handler to inform your storage backend that the authorization code has been used.`
  }
)

/**
 * Handler that runs after an authorization code has been verified.
 * You should use this handler to inform your storage backend that the
 * authorization code has been used.
 */
export type OnAuthorizationCodeVerified = Static<
  typeof onAuthorizationCodeVerified
>

/**
 * Handler invoked when the token endpoint has issued an access token and a
 * refresh token. You should use it to persist the tokens to storage.
 */
export const onIssuedTokens = Type.Function(
  [tokens_plus_info],
  Type.Promise(Type.Void()),
  {
    $id: 'on-issued-tokens',
    title: 'onIssuedTokens',
    description: `Handler invoked when the token endpoint has issued an access token and a refresh token. You should use this handler to persist the tokens to some storage (e.g. a database).`
  }
)

export type OnIssuedTokens = Static<typeof onIssuedTokens>

/**
 * Handler executed after the user approves the authorization request on the
 * consent screen.
 * You should use it to persist the authorization code generated by the
 * authorization endpoint into your storage backend.
 */
export const onUserApprovedRequest = Type.Function(
  [authorization_code_props],
  Type.Promise(Type.Void()),
  {
    title: 'onUserApprovedRequest',
    description: `Handler executed after the user approves the authorization request on the consent screen. You should use it to persist the authorization code generated by the authorization code generated by the authorization endpoint into your storage backend.`
  }
)

/**
 * Handler executed after the user approves the authorization request on the
 * consent screen.
 * You should use it to persist the authorization code generated by the
 * authorization endpoint into your storage backend.
 */
export type OnUserApprovedRequest = Static<typeof onUserApprovedRequest>

/**
 * Retrieves an access token from a storage backend.
 */
export const retrieveAccessToken = Type.Function(
  [jti],
  Type.Promise(
    Type.Union([access_token_immutable_record, access_token_mutable_record])
  ),
  {
    $id: 'retrieve-access-token',
    title: 'retrieveAccessToken',
    description: `Retrieves an access token from a storage backend.`
  }
)

/**
 * Retrieves an access token from a storage backend.
 */
export type RetrieveAccessToken = Static<typeof retrieveAccessToken>

/**
 * Retrieves an authorization code from a storage backend.
 */
export const retrieveAuthorizationCode = Type.Function(
  [authorization_code],
  Type.Promise(
    Type.Union([
      authorization_code_immutable_record,
      authorization_code_mutable_record
    ])
  ),
  {
    $id: 'retrieve-authorization-code',
    title: 'retrieveAuthorizationCode',
    description: `Retrieves an authorization code from a storage backend.`
  }
)

/**
 * Retrieves an authorization code from a storage backend.
 */
export type RetrieveAuthorizationCode = Static<typeof retrieveAuthorizationCode>

/**
 * Retrieves a refresh token from a storage backend.
 */
export const retrieveRefreshToken = Type.Function(
  [refresh_token],
  Type.Promise(
    Type.Union([refresh_token_immutable_record, refresh_token_mutable_record])
  ),
  {
    $id: 'retrieve-refresh-token',
    title: 'retrieveRefreshToken',
    description: `Retrieves a refresh token from a storage backend.`
  }
)

/**
 * Retrieves a refresh token from a storage backend.
 */
export type RetrieveRefreshToken = Static<typeof retrieveRefreshToken>

export const revoke_access_token_props = Type.Object({
  jti,
  revocation_reason: Type.Optional(revocation_reason)
})

export type RevokeAccessTokenProps = Static<typeof revoke_access_token_props>

export const revokeAccessToken = Type.Function(
  [revoke_access_token_props],
  Type.Promise(Type.Void()),
  {
    title: 'revokeAccessToken',
    description: `Handler invoked when the token revocation endpoint has met all requirements to revoke a token. You should use it to mark the access token as revoked in your storage backend.`
  }
)

export type RevokeAccessToken = Static<typeof revokeAccessToken>

export const revoke_refresh_token_props = Type.Object({
  refresh_token,
  revocation_reason: Type.Optional(revocation_reason)
})

export type RevokeRefreshTokenProps = Static<typeof revoke_refresh_token_props>

export const revokeRefreshToken = Type.Function(
  [revoke_refresh_token_props],
  Type.Promise(Type.Void()),
  {
    title: 'revokeRefreshToken',
    description: `Handler invoked when the token revocation endpoint has met all requirements to revoke a token. You should use it to mark the refresh token as revoked in your storage backend.`
  }
)

export type RevokeRefreshToken = Static<typeof revokeRefreshToken>

/**
 * Function that retrieves a user's profile from a storage backend.
 */
export const retrieveUserProfile = Type.Function(
  [me_after_url_canonicalization],
  Type.Promise(
    Type.Union([user_profile_immutable_record, user_profile_mutable_record])
  ),
  {
    $id: 'retrieve-user-profile',
    description: `Retrieves a user's profile from a storage backend.`,
    title: 'retrieveUserProfile'
  }
)

/**
 * Function that retrieves a user's profile from a storage backend.
 */
export type RetrieveUserProfile = Static<typeof retrieveUserProfile>
