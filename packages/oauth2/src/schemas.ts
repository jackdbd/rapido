import { Static, Type } from "@sinclair/typebox";

/**
 * Access Token.
 *
 * @see [Access Token](https://datatracker.ietf.org/doc/html/rfc6749#section-1.4)
 */
export const access_token = Type.String({ minLength: 1 });

/**
 * Authorization code generated by the authorization endpoint.
 *
 * The code MUST expire shortly after it is issued to mitigate the risk of
 * leaks, and MUST be valid for only one use.
 * A maximum lifetime of 10 minutes is recommended.
 *
 * @see [Authorization Response](https://datatracker.ietf.org/doc/html/rfc6749#section-4.1.2)
 */
export const authorization_code = Type.String({
  minLength: 1,
  description:
    "The authorization code generated by the authorization endpoint. The code MUST expire shortly after it is issued to mitigate the risk of leaks, and MUST be valid for only one use. A maximum lifetime of 10 minutes is recommended. See [Authorization Response](https://datatracker.ietf.org/doc/html/rfc6749#section-4.1.2).",
});

export const expires_in = Type.Number({ minimum: 1 });

/**
 * Refresh Token.
 *
 * After completing its interaction with the resource owner, the authorization
 * server directs the resource owner's user-agent back to the client.
 *
 * The authorization server redirects the user-agent to the client's redirection
 * endpoint previously established with the authorization server during the
 * client registration process or when making the authorization request.
 *
 * @see [Refresh Token](https://datatracker.ietf.org/doc/html/rfc6749#section-1.5)
 */
export const refresh_token = Type.String({ minLength: 1 });

/**
 * Redirection Endpoint.
 *
 * @see [Redirection Endpoint](https://datatracker.ietf.org/doc/html/rfc6749#section-3.1.2)
 * @see [Redirect URL](https://indieauth.spec.indieweb.org/#redirect-url)
 */
export const redirect_uri = Type.String({
  description:
    "Holds a URL. A successful response from this endpoint results in a redirect to this URL.",
  format: "uri",
});

/**
 * Parameter that tells the Authorization Server which mechanism to use for
 * returning Authorization Response parameters from the Authorization Endpoint.
 *
 * @see [Response Modes - OAuth 2.0 Multiple Response Type Encoding Practices](https://openid.net/specs/oauth-v2-multiple-response-types-1_0.html#ResponseModes)
 */
export const response_mode = Type.Union(
  [Type.Literal("fragment"), Type.Literal("query")],
  {
    $id: "oauth-2.0-response-mode",
    description: `OAuth 2.0 response_mode. See [Response Modes - OAuth 2.0 Multiple Response Type Encoding Practices](https://openid.net/specs/oauth-v2-multiple-response-types-1_0.html#ResponseModes).`,
  }
);

export type ResponseMode = Static<typeof response_mode>;

/**
 * OAuth 2.0 response_type string that a client can use at the authorization
 * endpoint.
 *
 * - `code`: The authorization code response type defined in [OAuth 2.0, Section 4.1](https://datatracker.ietf.org/doc/html/rfc7591#section-4.1).
 * - `token`: The implicit response type defined in [OAuth 2.0, Section 4.2](https://datatracker.ietf.org/doc/html/rfc7591#section-4.2).
 *
 * @see [Relationship between Grant Types and Response Types - OAuth 2.0 Dynamic Client Registration Protocol (RFC7591)](https://datatracker.ietf.org/doc/html/rfc7591#section-2.1)
 */
export const response_type = Type.Union(
  [Type.Literal("code"), Type.Literal("token")],
  {
    $id: "oauth-2.0-response-type",
    description: "Tells the authorization server which grant to execute.",
  }
);

export type ResponseType = Static<typeof response_type>;

export const scope = Type.String({
  description: `Scope values. See [RFC8693 scope claim](https://www.rfc-editor.org/rfc/rfc8693.html#name-scope-scopes-claim)`,
  minLength: 1,
  title: "OAuth 2.0 scope (scopes) claim",
});

/**
 * An opaque value used by the client to maintain state between the request and
 * callback. The parameter SHOULD be used for preventing cross-site request
 * forgery.
 *
 * @see [Prevent Attacks and Redirect Users with OAuth 2.0 State Parameters](https://auth0.com/docs/secure/attack-protection/state-parameters)
 */
export const state = Type.String({
  description:
    "An opaque value used by the client to maintain state between the request and callback. The parameter SHOULD be used for preventing cross-site request forgery. See [OAuth 2.0 Authorization Request](https://www.rfc-editor.org/rfc/rfc6749#section-4.1.1).",
  minLength: 1,
  title: "OAuth 2.0 state parameter (CSRF token)",
});
