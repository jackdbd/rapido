import { readdirSync, readFileSync, writeFileSync } from 'node:fs'
import path from 'node:path'
import { parseArgs } from 'node:util'
import { image, link } from '@thi.ng/transclude'
import markdownit from 'markdown-it'
import { REPO_ROOT } from '../../stdlib/lib/index.js'

const EXCLUDED_PACKAGES = [
  'error-handlers',
  'prettier-config',
  'scripts',
  'stdlib',
  'typescript-config'
]

const run = async () => {
  const { values } = parseArgs({
    allowPositionals: false,
    options: {
      // git reference could be a branch (e.g. main, canary) or a git tag (e.g. v1.0.0-canary.6)
      git_ref: { type: 'string' },
      github_username: { type: 'string', default: 'jackdbd' },
      npm_scope: { type: 'string', default: '@jackdbd' },
      output: {
        type: 'string',
        default: path.join(REPO_ROOT, 'docs', 'index.html')
      },
      page_description: {
        type: 'string',
        default: 'Index of all packages of the rapido monorepo.'
      },
      page_title: { type: 'string', default: 'Rapido Docs' },
      repo_name: { type: 'string', default: 'rapido' },
      started_in_year: { type: 'string', default: '2024' }
    }
  })

  const {
    github_username,
    npm_scope,
    output,
    page_description,
    page_title,
    repo_name
  } = values

  const items = readdirSync(path.join(REPO_ROOT, 'packages'))
    .filter((s) => !EXCLUDED_PACKAGES.includes(s))
    .map((unscoped_pkg_name) => {
      const pkg_root = path.join(REPO_ROOT, 'packages', unscoped_pkg_name)
      const pkg = JSON.parse(
        readFileSync(path.join(pkg_root, 'package.json'), 'utf-8')
      )
      const version = pkg.version

      const scoped_pkg_name = `${npm_scope}/${unscoped_pkg_name}`

      let git_ref: string
      if (values.git_ref) {
        git_ref = values.git_ref
      } else {
        git_ref = encodeURIComponent(
          `${npm_scope}/${unscoped_pkg_name}@${pkg.version}`
        ).replace('%2F', '/')
      }

      const pkg_href = `https://github.com/${github_username}/${repo_name}/tree/${git_ref}/packages/${unscoped_pkg_name}`

      // The docs/ directory is published to GitHub pages. Each package of this
      // monorepo is under a subdirectory of the docs/ directory.
      const home = link(scoped_pkg_name, pkg_href)

      const typedoc = link(
        'Docs',
        `./${unscoped_pkg_name}/${version}/index.html`
      )

      const npm_version = link(
        image(
          `https://badge.fury.io/js/${npm_scope}%2F${unscoped_pkg_name}.svg`,
          'npm version'
        ),
        `https://badge.fury.io/js/${npm_scope}%2F${unscoped_pkg_name}`
        // `https://www.npmjs.com/package/${npm_scope}/${unscoped_pkg_name}`
      )

      return {
        docs: typedoc,
        home,
        npm_version
      }
    })

  const rows = items.map((d) => {
    const row = [d.home, d.npm_version, d.docs].join(' | ')
    return `| ${row} |`
  })

  const table_md = [
    `| Package | Version | Docs |`,
    '|---|---|---|',
    rows.join('\n')
  ].join('\n')

  // https://github.com/markdown-it/markdown-it?tab=readme-ov-file#init-with-presets-and-options
  const md = markdownit({
    html: true,
    breaks: true,
    linkify: true,
    typographer: true
  })

  const head = [
    `<head>`,
    `<meta charset="utf-8">`,
    `<meta name="viewport" content="width=device-width, initial-scale=1.0">`,
    `<meta name="description" content="${page_description}">`,
    `<title>${page_title}</title>`,
    `<link rel="stylesheet" href="https://unpkg.com/mvp.css">`,
    `</head>`
  ].join('')

  const header_h1 = `<h1>${page_title}</h1>`
  const header = `<header>${header_h1}</header>`

  const footer_p = `<p>ðŸ¤– This page was generated automatically at ${new Date().toUTCString()}.</p>`
  const footer = `<footer><hr>${footer_p}</footer>`

  const section_table = [
    `<section id="packages-table">`,
    `<header>`,
    `<h2>Packages</h2>`,
    `<p>These ${rows.length} packages are published to npm.js.</p>`,
    `<p>The documentation for each package is automatically generated by <a href="https://typedoc.org/">TypeDoc</a>.</p>`,
    `</header>`,
    md.render(table_md).trim(),
    `</section>`
  ].join('')

  const body = [
    `<body>`,
    header,
    `<main>${section_table}</main>`,
    footer,
    `</body>`
  ].join('')

  const html = `<!doctype html><html lang="en">${head}${body}</html>`
  writeFileSync(output, html)
  console.log(`wrote ${output}`)
}

run()
